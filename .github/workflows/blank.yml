name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ORG: andretai-sandbox
  PAT: ${{ secrets.PAT }}
  REPO: gh-actions-test-target
  DEFAULT: main
  BRANCH: dev
  FILE: test_file.txt

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.ORG }}/${{ env.REPO }}
          path: './${{ env.REPO }}'
          token: ${{ env.PAT }}
      # Set global config such as user's email and name
      - name: Set up git config
        run: |
          git config --global user.email "andretai.wx@gmail.com"
          git config --global user.name "Andre Tai"
          git config -l
      # Fetch all remote branches, checkout to target branch if it exists, and create it if not
      - name: Check-out '${{ env.BRANCH }}' branch if exists, else create it
        run: |
          cd ${{ env.REPO }}
          git fetch --all
          REMOTE=$(git branch -r)
          if [[ $REMOTE == *"${{ env.BRANCH }}"* ]]; then
            echo "'$BRANCH' branch exists on remote"
            git checkout ${{ env.BRANCH }};
          else
            echo "'${{ env.BRANCH }}' branch doesn't exist on remote"
            git checkout -b ${{ env.BRANCH }};
          fi
      # Create target file if it doesn't exist and push to target branch
      - name: Check if file exists, create if not
        run: |
          cd ${{ env.REPO }}
          if test -f "${{ env.FILE }}"; then
            echo "${{ env.FILE }} exists";
            PR_REQUIRED=False >> $GITHUB_ENV;
          else
            touch ${{ env.FILE }};
            echo "# this is a test file" > ${{ env.FILE }};
            echo "	this is line number 2" >> ${{ env.FILE }};
            echo "line number 3 is this line" >> ${{ env.FILE }};
            echo "	# how many lines do we have?" >> ${{ env.FILE }};
            echo "" >> ${{ env.FILE }};
            echo "${{ env.FILE }} created";
            git add ${{ env.FILE }};
            git commit -m "Create $FILE";
            git push --set-upstream origin ${{ env.BRANCH }};
            echo "PR_REQUIRED=True" >> $GITHUB_ENV;
          fi
          echo "PR_REQUIRED: ${{ env.PR_REQUIRED }}"
      # Change target file (e.g. commenting or uncommenting lines) and push to target branch
      - name: Comment/uncomment lines
        run: |
          cd ${{ env.REPO }}
          IDX=1
          while read -r line; do 
            if [[ $line =~ ^#.* ]]; then
              echo $line;
              sed -i "$(( IDX ))s/#/ /" $FILE;
            fi;
            echo "$(( IDX++ ))";
          done < $FILE
          CHANGES=$(git status --porcelain)
          if [ -z "$CHANGES" ]; then
            echo "No changes to be commited";
          else
            git add ${{ env.FILE }};
            git commit -m "Update ${{ env.FILE }}";
            git push --set-upstream origin ${{ env.BRANCH }};
            echo "PR_REQUIRED=True" >> $GITHUB_ENV;
          fi
          echo "PR_REQUIRED: ${{ env.PR_REQUIRED }}"
      # After commits were pushed, create pull request and merge it
      - name: Create and merge pull request
        if: ${{ env.PR_REQUIRED }} == "True"
        run: |
          PR=$(\
            curl \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.PAT }}" \
            https://api.github.com/repos/${{ env.ORG }}/${{ env.REPO }}/pulls \
            -d '{"title":"Uncomment some lines","body":"Found some commented lines, uncommenting them!","head":"${{ env.BRANCH }}","base":"${{ env.DEFAULT }}"}'\
            | tac | tac | python -c 'import sys, json; print(json.load(sys.stdin)["number"])'
          )
          echo "PR NUMBER: $PR"
          MERGED=$(
            curl \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.PAT }}" \
            https://api.github.com/repos/${{ env.ORG }}/${{ env.REPO }}/pulls/$PR/merge\
            | tac | tac | python -c 'import sys, json; print(json.load(sys.stdin)["message"])'
          )
          echo "RESULT: $MERGED"
